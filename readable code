Ch１　優れたコードとは？　読みやすさの基本定理：コードはほかの人が最短時間で理解できるように書かなければいけない
Ch２　名前に情報を詰め込む
      2.1明確な単語を選ぶ　get → Download
      2.2汎用的な名前を避ける　tmp, i → tmp_file, users_i
      2.3具体的な名前を使う　run_locally → use_local_database
      2.4名前に情報を使いする　size, html → size_mb, html_utf8
      2.5名前の長さを決める　ConvertToString → ToString
      2.6大文字やアンダースコアなどに意味を含める　stats_(_はlocal変数)
Ch３　誤解されない名前：「他の意味と間違えられることはないだろうか？」
      3.1選択する？除外する？　filter() → select(), exclude()
      3.2削除する？切り詰める？　Clip(text, length) → Remove(text, length), Truncat(text, length)
      3.3限界値を含める時はminとmaxを使う　CART_TOO_BIG_LIMIT = 10 → MAX_ITEMS_IN_CART = 10
      3.4範囲を指定する時はfisrtとlastを使う　rang(start=2, stop=4) → rang(first=2, last=4)
      3.5包含/排他的範囲にはbeginとendを使う　
      3.6bool値の名前　SpaceLeft() → HasSpaceLeft()
      3.7userの期待に合わせる　「軽量アクセサ」getMean() → 「大量アクセサ」computeMean()
      3.8複数の名前を検討する　「プロトタイプ継承」 the_other_experiment_id_I_want_to_resuse → copy_experiment
      3.9最善の名前は誤解されない名前である
Ch４　美しさ
      4.1なぜ美しさが大切なのか？　見た目が美しいコードのおが使いやすい
      4.2一貫性のある簡潔な改行位置（似ているコードは似ているように見せる）
      4.3メソッドを使った整列
      4.4縦の線をまっすぐにする（手間にならないように）
      4.5一貫性と意味のある並び　a,b,c  b,c,a
      4.6宣言をブロックにまとめる
      4.7コードを「段落」に分割する
      4.8個人的な好みと一貫性（一貫性のあるスタイルは「正しい」スタイルよりも大切だ）
